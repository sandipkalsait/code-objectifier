{
  "@AuthServiceApplication": {
    "@main": {
      "prefix": "@main",
      "body": [
        "SpringApplication.run(AuthServiceApplication.class, args);",
        "}"
      ],
      "description": "Extracted method: main"
    }
  },
  "@Device": {
    "@Device": {
      "prefix": "@Device",
      "body": [
        "this.id = id;",
        "this.name = name;",
        "this.type = type;",
        "this.manufacturer = manufacturer;",
        "this.isOnline = isOnline;",
        "}",
        "",
        "// Getters and setters",
        "public String getId() {",
        "return id;",
        "}",
        "",
        "public void setId(String id) {",
        "this.id = id;",
        "}",
        "",
        "public String getName() {",
        "return name;",
        "}",
        "",
        "public void setName(String name) {",
        "this.name = name;",
        "}",
        "",
        "public String getType() {",
        "return type;",
        "}",
        "",
        "public void setType(String type) {",
        "this.type = type;",
        "}",
        "",
        "public String getManufacturer() {",
        "return manufacturer;",
        "}",
        "",
        "public void setManufacturer(String manufacturer) {",
        "this.manufacturer = manufacturer;",
        "}",
        "",
        "public boolean isOnline() {",
        "return isOnline;",
        "}",
        "",
        "public void setOnline(boolean online) {",
        "isOnline = online;",
        "}",
        "",
        "// Overriding toString for better display",
        "@Override",
        "public String toString() {",
        "return \"Device{\" +",
        "\"id='\" + id + '\\'' +",
        "\", name='\" + name + '\\'' +",
        "\", type='\" + type + '\\'' +",
        "\", manufacturer='\" + manufacturer + '\\'' +",
        "\", isOnline=\" + isOnline +",
        "'}';",
        "}"
      ],
      "description": "Extracted method: Device"
    }
  },
  "@SecurityConfig": {
    "@authenticationProvider": {
      "prefix": "@authenticationProvider",
      "body": [
        "DaoAuthenticationProvider provider = new DaoAuthenticationProvider();",
        "provider.setUserDetailsService(customUserDetailsService); // Use custom user details service",
        "provider.setPasswordEncoder(passwordEncoder()); // Use BCrypt for password encoding",
        "return provider;",
        "}",
        "",
        "/**",
        "* Configures the password encoder for encrypting and validating user passwords.",
        "*/",
        "@Bean",
        "public PasswordEncoder passwordEncoder() {",
        "return new BCryptPasswordEncoder(); // Strong password encoding",
        "}",
        "",
        "@Bean",
        "public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception",
        "{",
        "",
        "return authConfig.getAuthenticationManager();",
        "",
        "}"
      ],
      "description": "Extracted method: authenticationProvider"
    }
  },
  "@AuthController": {
    "@registerUser": {
      "prefix": "@registerUser",
      "body": [
        "User user=new User(authRequest.getUsername(),authRequest.getPassword(),authRequest.getRole().orElse(\"USER\"));",
        "log.info(\"Received request to register user: {}\", user);",
        "try {",
        "log.info(\"Registering user: {}\", user);",
        "authService.registerUser(user);",
        "log.info(\"User successfully registered: {}\", user);",
        "return ResponseEntity.status(HttpStatus.CREATED).body(\"User registered successfully: \" + user);",
        "} catch (Exception e) {",
        "log.error(\"Error occurred during user registration: \", e);",
        "return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Internal Server Error\");",
        "}",
        "}",
        "",
        "// Endpoint for user login",
        "@PostMapping(\"/login\")",
        "public ResponseEntity<String> loginUser(@RequestBody AuthRequest authRequest) {",
        "User user=new User(authRequest.getUsername(),authRequest.getPassword());",
        "log.info(\"Received login request for user: {}\", user);",
        "try {",
        "boolean isAuthenticated = authService.verifyUser(user);",
        "",
        "if (isAuthenticated) {",
        "log.info(\"User authenticated successfully: {}\", user.getUsername());",
        "String authToken = jwtService.generateToken(user.getUsername());",
        "log.info(\"Generated JWT token for user: {}\", user.getUsername());",
        "return ResponseEntity.status(HttpStatus.OK).body(\"User logged in successfully: \" + authToken);",
        "} else {",
        "log.warn(\"Invalid credentials for user: {}\", user.getUsername());",
        "return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Invalid credentials\");",
        "}",
        "} catch (Exception e) {",
        "log.error(\"Error occurred during user login: \", e);",
        "return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Internal Server Error\");",
        "}",
        "}"
      ],
      "description": "Extracted method: registerUser"
    }
  }
}